require 'sexpistol'

$stdout.sync = true

# This method takes the array of symbols/arrays that sexpistol generates and turns it into a hash.
# The value of the keys are nil unless a nested list is detected, in which case, the value is a nested hash.
def sp_array_to_hash(a)
  h = {}
  a.each do |elem|
    if elem.is_a? Array then
      # find the previous array element, which will receive our hash value
      name = a[a.find_index(elem)-1].to_s
      h["#{name}"] = sp_array_to_hash(elem)
    else
      h["#{elem.to_s}"] = nil
    end
  end
  return h
end

# This method recurses through the hash generated by sp_array_to_hash and prints it in the format required.
def print_hash(h, depth=0)
  keys = h.keys.sort
  keys.each do |k|
    if depth > 0 then
      depth.times do |t|
        print "-"
      end
      print " "
    end
    print "#{k}\n"

    if h[k].is_a? Hash then
      print_hash(h[k],depth+1)
    end
  end
end

str = "(id,created,employee(id,firstname,employeeType(id), lastname),location)"

# remove initial whitespace
str.gsub!(' ', '')

# s expressions use spaces to delimit items
str.gsub!(',', ' ')

@parser = Sexpistol.new
result = @parser.parse_string(str)

h = sp_array_to_hash(result[0])

print_hash(h)
